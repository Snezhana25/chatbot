{"version":3,"sources":["firebase.js","store/actions.js","api.js","context/store.js","store/Provider.jsx","store/utils.js","store/state.js","components/Navbar.js","hooks/store.js","components/ListMessages.js","components/SendMessages.js","pages/ListPage.js","App.js","serviceWorker.js","index.js","store/reducer.js"],"names":["firebase","initializeApp","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","NAMES","GET_LISTS","GET_LIST_PATH","CREATE_DATA","setStatus","payload","type","getList","lists","firestore","collection","get","then","snapshot","items","forEach","doc","push","data","console","log","catch","error","getPath","path","where","api","createTitle","add","completed","docRef","id","createContext","Provider","initialState","reducer","actions","children","useReducer","state","dispatch","memoizedActions","useMemo","Object","entries","reduce","result","key","fn","args","action","bindActions","memoizedStore","value","Navbar","list","map","user","className","cName","component","NavLink","to","name","useStore","useContext","StoreContext","ListMessages","messages","match","arr","n","title","SendMessages","onSubmit","useState","setTitle","event","preventDefault","onChange","ListPage","setMessage","useEffect","find","App","Boolean","window","location","hostname","ReactDOM","render","text","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.a50cc0e2.chunk.js","sourcesContent":["import firebase from \"firebase/app\"\nimport \"firebase/firestore\"\n\nconst firebaseConfig = {\n    apiKey: process.env.REACT_APP_FIREBASE_KEY,\n    authDomain: process.env.REACT_APP_FIREBASE_DOMAIN,\n    databaseURL: process.env.REACT_APP_FIREBASE_URL,\n    projectId: \"chatbot-7a810\",\n    storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUKET,\n    messagingSenderId: process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID,\n    appId: process.env.REACT_APP_FIREBASE_APP_ID\n};\n\nfirebase.initializeApp(firebaseConfig);\n\nexport default firebase;\n","import * as api from '../api';\n\nexport const NAMES = {\n    GET_LISTS: 'GET_LISTS',\n    GET_LIST_PATH: 'GET_LIST_PATH',\n    CREATE_DATA: 'CREATE_DATA'\n};\n\nexport const setStatus = payload => ({type: NAMES.GET_LISTS, payload})\n\nexport function getList(lists) {\n    return api.getLists(lists)\n        .then(lists => ({\n            type: 'GET_LISTS',\n            payload: {\n                lists\n            }\n        }));\n}\n\nexport function getPath(path) {\n    return api.getPath(path)\n        .then(path => ({\n            type: 'GET_LIST_PATH',\n            payload: {\n                path\n            }\n        }));\n}\n\nexport function createTitle(data) {\n    return api.createTitle(data)\n        .then(data => ({\n            type: 'CREATE_DATA',\n            payload: {\n                data\n            }\n        }));\n}\n","import firebase from \"./firebase\";\n\nexport function getLists() {\n    return firebase.firestore().collection('lists')\n        .get()\n        .then(snapshot => {\n            const items = [];\n            snapshot.forEach((doc) => {\n                items.push(doc.data());\n            });\n            console.log('itemsLists list+++', items);\n            return items;\n        })\n        .catch(function (error) {\n            console.error(\"Error adding document: \", error);\n        });\n}\n\nexport function getPath(path) {\n    return firebase.firestore().collection('lists')\n        .where(\"path\", \"==\", path)\n        .get()\n        .then(snapshot => {\n            const items = [];\n            snapshot.forEach((doc) => {\n                items.push(doc.data());\n            });\n            console.log('itemsMessages path+++', items);\n            return items;\n        })\n        .catch(function (error) {\n            console.error(\"Error adding document: \", error);\n        });\n}\n\nexport function createTitle(data) {\n    return firebase.firestore().collection('lists').add({\n        ...data,\n        completed: false\n    })\n        .then(docRef => docRef.get())\n        .then(doc => console.log(\"doc---\",doc))\n        .then(doc => ({\n            id: doc.id,\n            ...doc.data()\n        }));\n}\n\n// export function getMessages() {\n//     const collection = firebase.firestore().collection('messages');\n//     return (query = () => collection) => {\n//         return query(collection).get()\n//             .then(snapshot => {\n//                 const items = [];\n//                 snapshot.forEach((doc) => {\n//                     items.push(doc.data());\n//                 });\n//                 console.log('items+++', items);\n//                 return items;\n//             })\n//             .catch((error) => {\n//                 console.error(\"Error adding document: \", error);\n//             });\n//     }\n// }\n","import { createContext } from 'react';\n\nexport default createContext();\n","import React, { useReducer, useMemo } from 'react';\n\nimport StoreContext from '../context/store';\nimport { bindActions } from './utils';\n\nexport default function Provider({ initialState, reducer, actions, children }) {\n    const [state, dispatch] = useReducer(reducer, initialState);\n    console.log(\"Provider-state\", state);\n    console.log(\"Provider-dispatch\", dispatch);\n\n    // the resulting object is remembered to avoid\n    // being re-rendered in components\n    const memoizedActions = useMemo(() => bindActions\n    (actions, dispatch), [dispatch, actions]);\n\n    //store state and actions\n    const memoizedStore = useMemo(() => ({\n        state,\n        actions: memoizedActions\n    }), [state, memoizedActions]);\n\n    return (\n        <StoreContext.Provider value={memoizedStore}>\n            {children}\n        </StoreContext.Provider>\n    );\n}\n","export function bindActions(actions, dispatch) {\n    console.log(\"actions utill\", actions);\n\n    return Object.entries(actions).reduce((result, [key, fn]) => {\n        result[key] = (...args) => {\n\n            console.log(\"args\", args);\n            const action = fn(...args);\n\n            if (typeof action.then === 'function') {\n                action.then(dispatch);\n            } else if (typeof action === 'function') {\n                action(dispatch);\n            } else if (action.type) {\n                dispatch(action);\n            }\n\n            return action;\n        };\n\n        return result;\n    }, {});\n}\n\nexport function combineReducers(reducers) {\n    return function(state, action) {\n        return Object.entries(reducers).reduce((newState, [key, reducer]) => {\n            newState[key] = reducer(state[key], action);\n\n            return newState;\n        }, {});\n    };\n}\n","export default {\n    lists: [],\n    title: [],\n    path:[]\n};\n","import React from \"react\";\nimport { NavLink, Link } from \"react-router-dom\";\nexport default function Navbar({list}) {\n\n    console.log(\"users nav---\", list);\n    return (\n\n        <ul>\n            {list.map(user =>\n                <li key={user.id}\n                    className={user.cName}\n                    component={NavLink}>\n                    <Link to={user.path}>\n                        {user.name}\n                    </Link>\n                </li>\n            )}\n        </ul>\n    );\n}\n","import { useContext } from 'react';\n\nimport StoreContext from \"../context/store\"\n\nexport default function useStore() {\n    const { state, actions } = useContext(StoreContext);\n\n    console.log(\"useStore\", state);\n\n    return {\n        state,\n        actions\n    };\n}\n","import React from \"react\";\n\nexport default function ListMessages({messages, match}) {\n    const user = messages.lists.map(user => user);\n    const arr = [];\n\n    console.log(match);\n\n    user.forEach(n => {\n        arr.push(n.title);\n    });\n\n    console.log(arr);\n\n    const steps = [\n        {\n            id: \"Greet\",\n            message: \"Hello, Welcome to our shop\",\n            trigger: \"Ask Name\"\n        },\n        {\n            id: \"Ask Name\",\n            message: \"Please type your name?\",\n            trigger: \"Waiting user input for name\"\n        },\n        {\n            id: \"Waiting user input for name\",\n            user: true,\n            trigger: \"Asking options to eat\"\n        },\n        {\n            id: \"Asking options to eat\",\n            message: \"Hi {previousValue}, Glad to know you !!\",\n            trigger: \"Done\"\n        },\n        {\n            id: \"Done\",\n            message: \"Have a great day !!\",\n            end: true\n        }\n    ];\n\n    return (\n        <div key={user.id}>\n            {arr}\n        </div>\n    );\n}\n","import React, { useState } from 'react';\n\nexport default function SendMessages({ onSubmit }) {\n    const [title, setTitle] = useState('');\n\n    function handleSubmit(event) {\n        event.preventDefault();\n\n        onSubmit(title);\n        setTitle('');\n    }\n\n    return (\n        <form onSubmit={handleSubmit} className=\"todo-form\">\n            <input type=\"text\"\n                   value={title}\n                   onChange={setTitle}/>\n        </form>\n    );\n}\n","import React, { useEffect, useState} from 'react';\nimport useStore from \"../hooks/store\"\n\nimport ListMessages from \"../components/ListMessages\"\nimport SendMessages from \"../components/SendMessages\"\n\nexport default function ListPage({match}) {\n    const { state, actions } = useStore();\n    const [message, setMessage] = useState([]);\n\n    useEffect(() => {\n        setMessage();\n        actions.getList();\n    }, [actions, match.path]);\n\n    function handleSubmit(title) {\n        actions.createTitle({\n            title,\n            id: list.id\n        });\n    }\n\n    const list = state.lists.find(list => list.path === match.path);\n    console.log(\"---list page\", list);\n\n    return (\n        <>\n            <ListMessages\n                list={list}\n                messages={state}\n                match={match}\n            />\n            <SendMessages onSubmit={handleSubmit}/>\n        </>\n    );\n}\n","import React, {useEffect} from 'react';\nimport { Switch, Route } from 'react-router-dom';\n\nimport './App.css';\nimport Navbar from './components/Navbar';\nimport useStore from \"./hooks/store\"\nimport ListPage from './pages/ListPage';\n\nfunction App() {\n    const { state, actions } = useStore();\n\n    console.log(\"state app\", state);\n\n    useEffect(() => {\n       actions.getList();\n    }, [actions]);\n\n  return (\n    <>\n        <Navbar list={state.lists}/>\n        <Switch>\n            <Route path='/page1'  component={ListPage}/>\n            <Route path='/page2'  component={ListPage}/>\n        </Switch>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport { Provider, initialState, reducer, actions } from './store';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <Provider initialState={initialState} reducer={reducer} actions={actions}>\n        <Router>\n            <App />\n        </Router>\n    </Provider>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n","export default function reducer(state, action) {\n    console.log(\"reducer state\", state);\n    console.log(\"reducer action\", action);\n\n    switch (action.type) {\n        case 'GET_LISTS':\n            return {\n                ...state,\n                lists: action.payload.lists\n            };\n\n        case 'GET_LIST_PATH':\n            return {\n                ...state,\n                path: action.payload.path\n            };\n\n        case 'CREATE_DATA':\n            return {\n                ...state,\n                text: state.lists.push(action.payload.title)\n            };\n\n        default:\n            return state;\n    }\n}\n"],"sourceRoot":""}